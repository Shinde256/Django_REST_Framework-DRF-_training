django-admin startpoject<projectname>
last code copy =>
<app> and <db>
paste here=>
==============================================
settings.py=>
Installed_app=>
rest_framework
api

--------------------
models.py=>
from django.db import models

class Student(models.Model):
    name = models.CharField(max_length=50)
    roll = models.IntegerField()
    city = models.CharField(max_length=50)


-------------------
admins.py=>
from django.contrib import admin
from .models import Student

@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
    list_display = ['name','roll','city']
---------------------
from rest_framework import serializers
from .models import Student

class StudentSerilizers(serializers.ModelSerializer):
    class Meta:
        model = Student
        fields = ['id','name','roll','city']
----------------------

from rest_framework.response import Response
from .models import Student
from .serializers import StudentSerilizers
from rest_framework.views import APIView


class StudentAPI(APIView):
    def get(self, request, pk = None, format=None):
        id = pk
        if id is not None:
            stu = Student.objects.get(id=id)
            serializers = StudentSerilizers(stu)
            return Response(serializers.data)
        stu = Student.objects.all()
        serializers = StudentSerilizers(stu, many=True)
        return Response(serializers.data)


    def post(self,request, format=None):
        serilizer = StudentSerilizers(data=request.data)
        if serilizer.is_valid():
            serilizer.save()
            return Response({'msg':'data created'})
        return Response(serilizer.errors)

    def put (self,request, format=None):
        id = request.data.get('id')
        stu = Student.objects.get(pk = id)
        serializers =StudentSerilizers(stu,data=request.data , partial = True)
        if serializers.is_valid():
            serializers.save()
            return Response({'msg':'data updated'})
        return Response(serializers.errors)

    def delete(self,request,pk=None,format= None):
        id = pk
        st = request.data.get (pk = id)
        stu = Student.objects.get(st)
        stu.delete()
        return Response({'msg':'data Deleted'})

    def patch(self, request,pk=None, format= None):
        id = pk
        stu = Student.objects.get(pk = id)
        serializers = StudentSerilizers(stu,data=request.data,partial=True)
        if serializers.is_valid():
            serializers.save()
            return Response({'msg':'partial data updated'})
        return Response(serializers.errors)





--------------------
urls.py copy last urls
from django.contrib import admin
from django.urls import path
from api import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('studentapi/',views.StudentAPI.as_view()),
    path('studentapi/<int:pk>/',views.StudentAPI.as_view()),
]
================================================================
this is code NEW code=> 
============
views(Delete last and new write) 
=>
 from .models import Student
from .serializers import StudentSerilizers
from rest_framework.generics import GenericAPIView
from rest_framework.mixins import ListModelMixin,CreateModelMixin,UpdateModelMixin,RetrieveModelMixin,DestroyModelMixin


class StudentList(GenericAPIView , ListModelMixin):
    queryset = Student.objects.all()
    serializer_class = StudentSerilizers

    def get(self, request , *args ,**kwargs):
        return self.list(request , *args ,**kwargs)


class StudentCreate(GenericAPIView , CreateModelMixin):
    queryset = Student.objects.all()
    serializer_class = StudentSerilizers

    def post(self, request , *args ,**kwargs):
        return self.create(request , *args ,**kwargs)

class StudentUpdate(GenericAPIView , UpdateModelMixin):
    queryset = Student.objects.all()
    serializer_class = StudentSerilizers

    def put(self, request , *args ,**kwargs):
        return self.update(request , *args ,**kwargs)

class StudentRetrive(GenericAPIView , RetrieveModelMixin):
    queryset = Student.objects.all()
    serializer_class = StudentSerilizers

    def get(self, request , *args ,**kwargs):
        return self.retrieve(request , *args ,**kwargs)

class StudentRetrive(GenericAPIView , UpdateModelMixin):
    queryset = Student.objects.all()
    serializer_class = StudentSerilizers

    def get(self, request , *args ,**kwargs):
        return self.update(request , *args ,**kwargs)

class StudentDestroy(GenericAPIView , DestroyModelMixin):
    queryset = Student.objects.all()
    serializer_class = StudentSerilizers

    def delete(self, request, *args, **kwargs):
        return self.destroy(request , *args ,**kwargs)

============================================================
urls.py
------
from django.contrib import admin
from django.urls import path
from api import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('studentapi/',views.StudentList.as_view()),
    path('studentapi/<int:pk>/',views.StudentList.as_view()),
    path('SC/',views.StudentCreate.as_view()),
    path('su/<int:pk>/',views.StudentUpdate.as_view()),
    path('sr/<int:pk>',views.StudentRetrive.as_view()),
    path('sd/<int:pk>',views.StudentDestroy.as_view())
]
==============================================================
List and create -PK not allowed 
we have two class mearge=>

class LC_API(GenericAPIView , ListModelMixin, CreateModelMixin):
    queryset = Student.objects.all()
    serializer_class = StudentSerilizers

    def get(self, request , *args ,**kwargs):
        return self.list(request , *args ,**kwargs)

    def post(self, request , *args ,**kwargs):
        return self.create(request , *args ,**kwargs)
=====================================================
Retrive,update,Destory=>
mearge class

class RUDStudentAPI(GenericAPIView , RetrieveModelMixin,, UpdateModelMixin, DestroyModelMixin):
    queryset = Student.objects.all()
    serializer_class = StudentSerilizers

    def get(self, request , *args ,**kwargs):
        return self.retrieve(request , *args ,**kwargs)

    def get(self, request , *args ,**kwargs):
        return self.update(request , *args ,**kwargs)

    def delete(self, request, *args, **kwargs):
        return self.destroy(request , *args ,**kwargs)
========================================================== 






 


